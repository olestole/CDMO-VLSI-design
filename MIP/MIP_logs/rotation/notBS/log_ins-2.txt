Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /usr/local/lib/python3.9/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/t4/vnxj6kkj2n97knry5lnrscx00000gn/T/4bd5f880b8f946c7b332b81a26bb58c9-pulp.mps sec 300 timeMode elapsed branch printingOptions all solution /var/folders/t4/vnxj6kkj2n97knry5lnrscx00000gn/T/4bd5f880b8f946c7b332b81a26bb58c9-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 65 COLUMNS
At line 404 RHS
At line 465 BOUNDS
At line 523 ENDATA
Problem MODEL has 60 rows, 56 columns and 215 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 300
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 59 rows, 55 columns (55 integer (44 of which binary)) and 217 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 41 integers unsatisfied sum - 11.1481
Cbc0038I Pass   1: suminf.    6.85185 (23) obj. 15 iterations 18
Cbc0038I Pass   2: suminf.    4.92593 (18) obj. 15 iterations 12
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 17 iterations 21
Cbc0038I Solution found of 17
Cbc0038I Cleaned solution of 17
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 59 rows 55 columns, reduced to 40 rows 32 columns
Cbc0038I Mini branch and bound improved solution from 17 to 12 (0.02 seconds)
Cbc0038I Round again with cutoff of 10.6001
Cbc0038I Pass   4: suminf.    7.00000 (26) obj. 10 iterations 1
Cbc0038I Pass   5: suminf.    7.99955 (28) obj. 10.6001 iterations 8
Cbc0038I Pass   6: suminf.    1.30343 (5) obj. 10.6001 iterations 26
Cbc0038I Pass   7: suminf.    1.70334 (6) obj. 10.6001 iterations 2
Cbc0038I Pass   8: suminf.    2.26631 (6) obj. 10.6001 iterations 7
Cbc0038I Pass   9: suminf.    1.74037 (7) obj. 10.6001 iterations 7
Cbc0038I Pass  10: suminf.    2.26631 (6) obj. 10.6001 iterations 5
Cbc0038I Pass  11: suminf.    1.70334 (6) obj. 10.6001 iterations 5
Cbc0038I Pass  12: suminf.    2.48843 (9) obj. 10.6001 iterations 10
Cbc0038I Pass  13: suminf.    2.48843 (9) obj. 10.6001 iterations 4
Cbc0038I Solution found of 10.6001
Cbc0038I Branch and bound needed to clear up 5 general integers
Cbc0038I Full problem 60 rows 55 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 9
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 59 rows 55 columns, reduced to 48 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of 7.80008
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  14: suminf.    8.03704 (32) obj. 7 iterations 5
Cbc0038I Pass  15: suminf.    3.61111 (18) obj. 7 iterations 19
Cbc0038I Pass  16: suminf.    3.48148 (18) obj. 7 iterations 2
Cbc0038I Pass  17: suminf.    1.38889 (7) obj. 7 iterations 20
Cbc0038I Pass  18: suminf.    1.29630 (9) obj. 7 iterations 4
Cbc0038I Pass  19: suminf.    2.27778 (9) obj. 7 iterations 15
Cbc0038I Pass  20: suminf.    1.96296 (9) obj. 7 iterations 1
Cbc0038I Pass  21: suminf.    1.31481 (9) obj. 7 iterations 9
Cbc0038I Pass  22: suminf.    1.22222 (9) obj. 7 iterations 3
Cbc0038I Pass  23: suminf.    3.25926 (14) obj. 7 iterations 21
Cbc0038I Pass  24: suminf.    1.92593 (9) obj. 7 iterations 6
Cbc0038I Pass  25: suminf.    1.38889 (7) obj. 7 iterations 12
Cbc0038I Pass  26: suminf.    1.38889 (9) obj. 7 iterations 3
Cbc0038I Pass  27: suminf.    1.88889 (9) obj. 7 iterations 14
Cbc0038I Pass  28: suminf.    3.11111 (11) obj. 7 iterations 24
Cbc0038I Pass  29: suminf.    2.88889 (13) obj. 7 iterations 6
Cbc0038I Pass  30: suminf.    2.55556 (13) obj. 7 iterations 2
Cbc0038I Pass  31: suminf.    2.81481 (12) obj. 7 iterations 19
Cbc0038I Pass  32: suminf.    1.70370 (12) obj. 7 iterations 17
Cbc0038I Pass  33: suminf.    2.14815 (12) obj. 7 iterations 16
Cbc0038I Pass  34: suminf.    2.13757 (13) obj. 7 iterations 5
Cbc0038I Pass  35: suminf.    2.81481 (12) obj. 7 iterations 19
Cbc0038I Pass  36: suminf.    2.44444 (12) obj. 7 iterations 4
Cbc0038I Pass  37: suminf.    1.51852 (7) obj. 7 iterations 20
Cbc0038I Pass  38: suminf.    1.03704 (6) obj. 7 iterations 12
Cbc0038I Pass  39: suminf.    1.70370 (10) obj. 7 iterations 6
Cbc0038I Pass  40: suminf.    1.40741 (8) obj. 7 iterations 10
Cbc0038I Pass  41: suminf.    1.33333 (8) obj. 7 iterations 4
Cbc0038I Pass  42: suminf.    1.96296 (11) obj. 7 iterations 14
Cbc0038I Pass  43: suminf.    1.03704 (6) obj. 7 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of 9 - took 0.04 seconds
Cbc0012I Integer solution of 9 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 21 added rows had average density of 2.047619
Cbc0013I At root node, 21 cuts changed objective from 7 to 7 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 157 row cuts average 2.0 elements, 6 column cuts (6 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 20 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 20 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 27 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 20 row cuts average 2.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective 9, took 57 iterations and 0 nodes (0.06 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 7 to 7
Probing was tried 2 times and created 163 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Gomory was tried 1 times and created 20 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 1 times and created 20 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 1 times and created 27 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 20 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                9.00000000
Enumerated nodes:               0
Total iterations:               57
Time (CPU seconds):             0.05
Time (Wallclock seconds):       0.07

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.07

