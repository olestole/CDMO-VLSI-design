Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /usr/local/lib/python3.9/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/t4/vnxj6kkj2n97knry5lnrscx00000gn/T/21a2d20ef7d24cc0a9de4940502a0bb3-pulp.mps sec 300 timeMode elapsed branch printingOptions all solution /var/folders/t4/vnxj6kkj2n97knry5lnrscx00000gn/T/21a2d20ef7d24cc0a9de4940502a0bb3-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 250 COLUMNS
At line 1404 RHS
At line 1650 BOUNDS
At line 1853 ENDATA
Problem MODEL has 245 rows, 201 columns and 750 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 300
Option for timeMode changed from cpu to elapsed
Continuous objective value is 12 - 0.00 seconds
Cgl0004I processed model has 235 rows, 201 columns (201 integer (180 of which binary)) and 740 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 201 objects (201 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 180 integers unsatisfied sum - 28.6875
Cbc0038I Pass   1: suminf.   27.56250 (140) obj. 21 iterations 45
Cbc0038I Pass   2: suminf.   26.12500 (136) obj. 21 iterations 9
Cbc0038I Pass   3: suminf.   17.06250 (111) obj. 21 iterations 46
Cbc0038I Pass   4: suminf.   13.45423 (98) obj. 21 iterations 24
Cbc0038I Pass   5: suminf.    7.23504 (64) obj. 24 iterations 46
Cbc0038I Pass   6: suminf.    5.16109 (49) obj. 30 iterations 21
Cbc0038I Pass   7: suminf.    0.75264 (8) obj. 58 iterations 52
Cbc0038I Solution found of 58
Cbc0038I Cleaned solution of 58
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 235 rows 201 columns, reduced to 234 rows 199 columns - 22 fixed gives 212, 177 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 52.5001
Cbc0038I Pass   8: suminf.   27.56250 (140) obj. 21 iterations 0
Cbc0038I Pass   9: suminf.   26.12500 (136) obj. 21 iterations 13
Cbc0038I Pass  10: suminf.   20.43750 (123) obj. 21 iterations 24
Cbc0038I Pass  11: suminf.   12.65141 (96) obj. 24 iterations 70
Cbc0038I Pass  12: suminf.   10.10211 (79) obj. 31 iterations 26
Cbc0038I Pass  13: suminf.    5.08539 (51) obj. 34 iterations 38
Cbc0038I Pass  14: suminf.    3.23556 (18) obj. 52.5001 iterations 58
Cbc0038I Pass  15: suminf.    2.19506 (8) obj. 52.5001 iterations 25
Cbc0038I Pass  16: suminf.    1.59744 (5) obj. 52.5001 iterations 6
Cbc0038I Solution found of 52.5001
Cbc0038I Branch and bound needed to clear up 3 general integers
Cbc0038I Full problem 236 rows 201 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 49
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 235 rows 201 columns, reduced to 234 rows 199 columns - 94 fixed gives 126, 92 - still too large
Cbc0038I Full problem 235 rows 201 columns, reduced to 120 rows 87 columns
Cbc0038I Mini branch and bound improved solution from 49 to 29 (0.06 seconds)
Cbc0038I Round again with cutoff of 24.8001
Cbc0038I Pass  17: suminf.   27.56250 (140) obj. 21 iterations 0
Cbc0038I Pass  18: suminf.   26.12500 (136) obj. 21 iterations 13
Cbc0038I Pass  19: suminf.   16.31250 (109) obj. 21 iterations 58
Cbc0038I Pass  20: suminf.    9.94190 (80) obj. 24 iterations 52
Cbc0038I Pass  21: suminf.    6.60557 (67) obj. 24.8001 iterations 36
Cbc0038I Pass  22: suminf.    4.16105 (47) obj. 24.8001 iterations 28
Cbc0038I Pass  23: suminf.    1.87549 (20) obj. 24.8001 iterations 44
Cbc0038I Pass  24: suminf.    1.85014 (19) obj. 24.8001 iterations 3
Cbc0038I Pass  25: suminf.    1.23391 (9) obj. 24.8001 iterations 22
Cbc0038I Pass  26: suminf.    0.97433 (6) obj. 24.8001 iterations 18
Cbc0038I Pass  27: suminf.    0.77441 (5) obj. 24.8001 iterations 9
Cbc0038I Pass  28: suminf.    7.45126 (44) obj. 24.8001 iterations 80
Cbc0038I Pass  29: suminf.    5.73181 (38) obj. 24.8001 iterations 21
Cbc0038I Pass  30: suminf.    3.70424 (22) obj. 24.8001 iterations 41
Cbc0038I Pass  31: suminf.    2.76674 (18) obj. 24.8001 iterations 7
Cbc0038I Pass  32: suminf.    1.78817 (13) obj. 24.8001 iterations 26
Cbc0038I Pass  33: suminf.    1.98527 (13) obj. 24.8001 iterations 8
Cbc0038I Pass  34: suminf.    1.83034 (10) obj. 24.8001 iterations 7
Cbc0038I Pass  35: suminf.    1.66133 (10) obj. 24.8001 iterations 5
Cbc0038I Pass  36: suminf.    8.27357 (46) obj. 24.8001 iterations 73
Cbc0038I Pass  37: suminf.    5.78358 (38) obj. 24.8001 iterations 12
Cbc0038I Pass  38: suminf.    3.96758 (29) obj. 24.8001 iterations 42
Cbc0038I Pass  39: suminf.    3.15305 (25) obj. 24.8001 iterations 6
Cbc0038I Pass  40: suminf.    4.97831 (28) obj. 24.8001 iterations 34
Cbc0038I Pass  41: suminf.    4.19619 (29) obj. 24.8001 iterations 8
Cbc0038I Pass  42: suminf.    4.01572 (22) obj. 24.8001 iterations 33
Cbc0038I Pass  43: suminf.    2.94758 (23) obj. 24.8001 iterations 8
Cbc0038I Pass  44: suminf.    3.05736 (17) obj. 24.8001 iterations 25
Cbc0038I Pass  45: suminf.    2.81925 (18) obj. 24.8001 iterations 5
Cbc0038I Pass  46: suminf.    3.00683 (17) obj. 24.8001 iterations 19
Cbc0038I Pass  47: suminf.    2.36888 (16) obj. 24.8001 iterations 11
Cbc0038I Pass  48: suminf.    2.88394 (17) obj. 24.8001 iterations 17
Cbc0038I Pass  49: suminf.    2.64583 (18) obj. 24.8001 iterations 5
Cbc0038I Pass  50: suminf.    3.00683 (17) obj. 24.8001 iterations 18
Cbc0038I Pass  51: suminf.    7.54510 (40) obj. 24.8001 iterations 70
Cbc0038I Pass  52: suminf.    5.84081 (36) obj. 24.8001 iterations 19
Cbc0038I Pass  53: suminf.    2.82935 (18) obj. 24.8001 iterations 41
Cbc0038I Pass  54: suminf.    1.47010 (15) obj. 24.8001 iterations 7
Cbc0038I Pass  55: suminf.    2.16543 (15) obj. 24.8001 iterations 16
Cbc0038I Pass  56: suminf.    2.28771 (14) obj. 24.8001 iterations 20
Cbc0038I Pass  57: suminf.    1.53771 (12) obj. 24.8001 iterations 4
Cbc0038I Pass  58: suminf.    2.07072 (15) obj. 24.8001 iterations 18
Cbc0038I Pass  59: suminf.    3.51892 (20) obj. 24.8001 iterations 17
Cbc0038I Pass  60: suminf.    2.86477 (17) obj. 24.8001 iterations 20
Cbc0038I Pass  61: suminf.    1.72785 (12) obj. 24.8001 iterations 17
Cbc0038I Pass  62: suminf.    7.85374 (42) obj. 24.8001 iterations 65
Cbc0038I Pass  63: suminf.    6.44881 (37) obj. 24.8001 iterations 15
Cbc0038I Pass  64: suminf.    6.01131 (36) obj. 24.8001 iterations 3
Cbc0038I Pass  65: suminf.    3.11027 (24) obj. 24.8001 iterations 51
Cbc0038I Pass  66: suminf.    2.32019 (23) obj. 24.8001 iterations 12
Cbc0038I Pass  67: suminf.    4.60049 (20) obj. 24.8001 iterations 27
Cbc0038I Pass  68: suminf.    4.60049 (20) obj. 24.8001 iterations 1
Cbc0038I Pass  69: suminf.    1.38313 (14) obj. 24.8001 iterations 18
Cbc0038I Pass  70: suminf.    3.56940 (14) obj. 24.8001 iterations 16
Cbc0038I Pass  71: suminf.    8.57785 (36) obj. 24.8001 iterations 72
Cbc0038I Pass  72: suminf.    6.89035 (32) obj. 24.8001 iterations 13
Cbc0038I Pass  73: suminf.    5.82785 (28) obj. 24.8001 iterations 5
Cbc0038I Pass  74: suminf.    5.07785 (26) obj. 24.8001 iterations 6
Cbc0038I Pass  75: suminf.    2.07874 (15) obj. 24.8001 iterations 34
Cbc0038I Pass  76: suminf.    1.99423 (16) obj. 24.8001 iterations 12
Cbc0038I Pass  77: suminf.    2.88414 (17) obj. 24.8001 iterations 19
Cbc0038I Pass  78: suminf.    2.43343 (15) obj. 24.8001 iterations 14
Cbc0038I Pass  79: suminf.    2.80834 (15) obj. 24.8001 iterations 21
Cbc0038I Pass  80: suminf.    2.19928 (13) obj. 24.8001 iterations 15
Cbc0038I Pass  81: suminf.    2.23018 (14) obj. 24.8001 iterations 7
Cbc0038I Pass  82: suminf.    9.17966 (51) obj. 24.8001 iterations 74
Cbc0038I Pass  83: suminf.    6.51154 (35) obj. 24.8001 iterations 15
Cbc0038I Pass  84: suminf.    5.26154 (31) obj. 24.8001 iterations 9
Cbc0038I Pass  85: suminf.    4.26154 (27) obj. 24.8001 iterations 7
Cbc0038I Pass  86: suminf.    2.51368 (16) obj. 24.8001 iterations 39
Cbc0038I Pass  87: suminf.    2.60938 (20) obj. 24.8001 iterations 6
Cbc0038I Pass  88: suminf.    2.12434 (17) obj. 24.8001 iterations 27
Cbc0038I Pass  89: suminf.    2.54795 (20) obj. 24.8001 iterations 24
Cbc0038I Pass  90: suminf.    2.54795 (20) obj. 24.8001 iterations 5
Cbc0038I Pass  91: suminf.    1.72002 (14) obj. 24.8001 iterations 24
Cbc0038I Pass  92: suminf.    1.47785 (10) obj. 24.8001 iterations 18
Cbc0038I Pass  93: suminf.    1.62769 (12) obj. 24.8001 iterations 14
Cbc0038I Pass  94: suminf.    2.56195 (17) obj. 24.8001 iterations 16
Cbc0038I Pass  95: suminf.    1.82487 (14) obj. 24.8001 iterations 11
Cbc0038I Pass  96: suminf.    6.98308 (35) obj. 24.8001 iterations 57
Cbc0038I Pass  97: suminf.    4.87927 (29) obj. 24.8001 iterations 16
Cbc0038I Pass  98: suminf.    4.44177 (28) obj. 24.8001 iterations 4
Cbc0038I Pass  99: suminf.    3.04743 (22) obj. 24.8001 iterations 28
Cbc0038I Pass 100: suminf.    2.98493 (23) obj. 24.8001 iterations 7
Cbc0038I Pass 101: suminf.    2.68026 (19) obj. 24.8001 iterations 29
Cbc0038I Pass 102: suminf.    2.20217 (18) obj. 24.8001 iterations 20
Cbc0038I Pass 103: suminf.    1.76517 (16) obj. 24.8001 iterations 20
Cbc0038I Pass 104: suminf.    1.85241 (15) obj. 24.8001 iterations 21
Cbc0038I Pass 105: suminf.    1.51517 (14) obj. 24.8001 iterations 18
Cbc0038I Pass 106: suminf.    6.38074 (31) obj. 24.8001 iterations 59
Cbc0038I Pass 107: suminf.    6.15057 (32) obj. 24.8001 iterations 17
Cbc0038I Pass 108: suminf.    5.27557 (32) obj. 24.8001 iterations 11
Cbc0038I Pass 109: suminf.    2.83527 (22) obj. 24.8001 iterations 35
Cbc0038I Pass 110: suminf.    2.10374 (23) obj. 24.8001 iterations 10
Cbc0038I Pass 111: suminf.    3.81469 (25) obj. 24.8001 iterations 31
Cbc0038I Pass 112: suminf.    3.31469 (23) obj. 24.8001 iterations 4
Cbc0038I Pass 113: suminf.    2.22698 (18) obj. 24.8001 iterations 25
Cbc0038I Pass 114: suminf.    2.39310 (21) obj. 24.8001 iterations 3
Cbc0038I Pass 115: suminf.    2.93457 (22) obj. 24.8001 iterations 26
Cbc0038I Pass 116: suminf.    8.82260 (54) obj. 24.8001 iterations 74
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 235 rows 201 columns, reduced to 235 rows 201 columns - 94 fixed gives 127, 92 - still too large
Cbc0038I Full problem 235 rows 201 columns, reduced to 120 rows 87 columns
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of 29 - took 0.14 seconds
Cbc0012I Integer solution of 29 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0031I 99 added rows had average density of 11.89899
Cbc0013I At root node, 99 cuts changed objective from 12 to 12 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1704 row cuts average 4.2 elements, 0 column cuts (1 active)  in 0.085 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 2841 row cuts average 90.6 elements, 0 column cuts (0 active)  in 0.126 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 13 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 660 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 18 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 940 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.052 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 498 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.863 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 29 best solution, best possible 12 (4.13 seconds)
Cbc0038I Full problem 235 rows 201 columns, reduced to 161 rows 128 columns - 63 fixed gives 65, 42 - ok now
Cbc0038I Full problem 235 rows 201 columns, reduced to 34 rows 25 columns
Cbc0038I Full problem 235 rows 201 columns, reduced to 95 rows 73 columns
Cbc0038I Full problem 235 rows 201 columns, reduced to 146 rows 115 columns - 57 fixed gives 62, 41 - ok now
Cbc0038I Full problem 235 rows 201 columns, reduced to 26 rows 18 columns
Cbc0038I Full problem 235 rows 201 columns, reduced to 83 rows 65 columns
Cbc0038I Full problem 235 rows 201 columns, reduced to 124 rows 99 columns - 46 fixed gives 59, 42 - ok now
Cbc0038I Full problem 235 rows 201 columns, reduced to 51 rows 36 columns
Cbc0038I Full problem 235 rows 201 columns, reduced to 130 rows 102 columns - 45 fixed gives 47, 27 - ok now
Cbc0016I Integer solution of 16 found by strong branching after 32622 iterations and 810 nodes (15.91 seconds)
Cbc0001I Search completed - best objective 16, took 231321 iterations and 62264 nodes (15.91 seconds)
Cbc0032I Strong branching done 8698 times (74625 iterations), fathomed 182 nodes and fixed 198 variables
Cbc0041I Maximum depth 25, 0 variables fixed on reduced cost (complete fathoming 25 times, 61454 nodes taking 198694 iterations)
Cuts at root node changed objective from 12 to 12
Probing was tried 100 times and created 1704 cuts of which 1 were active after adding rounds of cuts (0.085 seconds)
Gomory was tried 100 times and created 2841 cuts of which 0 were active after adding rounds of cuts (0.126 seconds)
Knapsack was tried 100 times and created 13 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
MixedIntegerRounding2 was tried 100 times and created 660 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
FlowCover was tried 100 times and created 18 cuts of which 0 were active after adding rounds of cuts (0.053 seconds)
TwoMirCuts was tried 100 times and created 940 cuts of which 0 were active after adding rounds of cuts (0.052 seconds)
ZeroHalf was tried 100 times and created 498 cuts of which 0 were active after adding rounds of cuts (0.863 seconds)
ImplicationCuts was tried 43 times and created 699 cuts of which 0 were active after adding rounds of cuts (0.044 seconds)

Result - Optimal solution found

Objective value:                16.00000000
Enumerated nodes:               62264
Total iterations:               231321
Time (CPU seconds):             12.50
Time (Wallclock seconds):       15.93

Option for printingOptions changed from normal to all
Total time (CPU seconds):       12.50   (Wallclock seconds):       15.93

